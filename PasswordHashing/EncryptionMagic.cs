using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace PasswordHashing
{
    internal class EncryptionMagic
    {
        /// <summary>
        /// Generates a key and initializationVector to encrypt data using the AES algorithm. Both the key and the 
        /// initializationVector will be needed to decrypt the information successfully. The key should be treated
        /// as secret and secured accordingly
        /// </summary>
        /// <param name="key">OUTPUT PARAMETER: this parameter will store the key generated by this method</param>
        /// <param name="initializationVector">OUTPUT PARAMETER: More study needed as to why, but the initializationVector
        /// is used by AES to make cyphertext output less predictable.</param>
        public static void GenerateKey(out string key, out string initializationVector)
        {
            //create key and IV using the Aes.Create method to select the appropriate AES implimentation 
            //automatically.
            using (Aes aesAlgorithm = Aes.Create())
            {
                //both parameters are stored as an array of bytes by default, this code converts them
                //to strings then passes them back through the output parameters
                key = Convert.ToBase64String(aesAlgorithm.Key);
                initializationVector = Convert.ToBase64String(aesAlgorithm.IV);
            }
        }

        /// <summary>
        /// Encrypts plaintext using the AES algoritim returning cyphertext that can be decrypted using
        /// the same key and initialization vector.
        /// </summary>
        /// <param name="plaintext">plain, unencrypted, human readable, text to be encrypted.</param>
        /// <param name="key">AES key used for encryption in string form. (will be converted back 
        /// into a byte array to perform encryption)</param>
        /// <param name="initializationVector">AES initialization vector used for encryption in string form. 
        /// (will be converted back into a byte array to perform encryption)</param>
        /// <returns>encrypted cyphertext representation of the plaintext supplied</returns>
        static public string EncryptAES(string plaintext, string key, string initializationVector)
        {
            string cyphertext = "";

            using (Aes aesAlgorithm = Aes.Create())
            {
                //convert the key and the IV back into byte arrays
                aesAlgorithm.Key = Convert.FromBase64String(key);
                aesAlgorithm.IV = Convert.FromBase64String(initializationVector);

                //creates object that performs encryption from the original Aes object
                ICryptoTransform encryptor = aesAlgorithm.CreateEncryptor();

                //Actual magic I need to study more to understand... but here goes...
                //MemoryStream is created as the underlying storage method for the encryptiong???
                //CryptoStream performs encryption on data that enters it
                //StreamWriter is used to write to the CryptoStream which writes the encrypted text to the
                //MemoryStream. The encrypted text (cyphertext) is then extracted from the memory stream as a
                //byte array and converted to a string.
                using (MemoryStream ms = new MemoryStream())
                {
                    using (CryptoStream cryptostream = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter writer = new StreamWriter(cryptostream))
                        {
                            writer.Write(plaintext);
                        }

                        cyphertext = Convert.ToBase64String(ms.ToArray());
                    }
                }
            }

            return cyphertext;
        }

        /// <summary>
        /// Decrypts cyphertext using the AES algoritim and return the decrypted plaintext 
        /// </summary>
        /// <param name="cyphertext">encrypted text represented as a string.</param>
        /// <param name="key">AES key used for decryption in string form. (will be converted back 
        /// into a byte array to perform encryption)</param>
        /// <param name="initializationVector">AES initialization vector used for decryption in string form. 
        /// (will be converted back into a byte array to perform encryption)</param>
        /// <returns>Decrypted plaintext.</returns>
        static public string DecryptAES(string cyphertext, string key, string initializationVector)
        {
            string plaintext = "";

            using (Aes aesAlgorithm = Aes.Create())
            {
                //convert key and IV back into byte arrays.
                aesAlgorithm.Key = Convert.FromBase64String(key);
                aesAlgorithm.IV = Convert.FromBase64String(initializationVector);

                //create the object that performs the decryption
                ICryptoTransform decryptor = aesAlgorithm.CreateDecryptor();

                //actual magic I need to study further
                //I believe the memoryStream stores the cyphertext string, then a cryptoStream is created to 
                //decrypt the string, finally a StreamReader is created to read the decrypted text.
                using (MemoryStream memory = new MemoryStream(Convert.FromBase64String(cyphertext)))
                {
                    using (CryptoStream cryptostream = new CryptoStream(memory, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader reader = new StreamReader(cryptostream))
                        {
                            //store the decrypted plaintext.
                            plaintext = reader.ReadToEnd();
                        }
                    }
                }
            }

            return plaintext;
        }
    }
}
